[{"/Users/Enjodi/Desktop/project2/Dom the Dev/movieapp/src/index.js":"1","/Users/Enjodi/Desktop/project2/Dom the Dev/movieapp/src/App.js":"2","/Users/Enjodi/Desktop/project2/Dom the Dev/movieapp/src/components/Movie.js":"3","/Users/Enjodi/Desktop/movieapp/src/index.js":"4","/Users/Enjodi/Desktop/movieapp/src/TabMovies.js":"5","/Users/Enjodi/Desktop/movieapp/src/TabMovies/Movie.js":"6"},{"size":219,"mtime":1643618062703,"results":"7","hashOfConfig":"8"},{"size":5567,"mtime":1643619790361,"results":"9","hashOfConfig":"8"},{"size":717,"mtime":1643618062700,"results":"10","hashOfConfig":"8"},{"size":244,"mtime":1644302065968,"results":"11","hashOfConfig":"12"},{"size":5630,"mtime":1644370384984,"results":"13","hashOfConfig":"12"},{"size":951,"mtime":1644211765033,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7eykb1",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"xcu2d0",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Enjodi/Desktop/project2/Dom the Dev/movieapp/src/index.js",[],[],"/Users/Enjodi/Desktop/project2/Dom the Dev/movieapp/src/App.js",["36"],[],"import {useEffect, useState} from \"react\"\nimport './App.css'\nimport axios from 'axios'\nimport Movie from \"./components/Movie\"\nimport Youtube from 'react-youtube'\n\nfunction App() {\n    const MOVIE_API = \"https://api.themoviedb.org/3/\"\n    const SEARCH_API = MOVIE_API + \"search/movie\"\n    const DISCOVER_API = MOVIE_API + \"discover/movie\"\n    const API_KEY = \"9f7b6e946ac75c3cb54ee6d09ea3c774\"\n    const BACKDROP_PATH = \"https://image.tmdb.org/t/p/w1280\"\n\n    const [playing, setPlaying] = useState(false)\n    const [trailer, setTrailer] = useState(null)\n    const [movies, setMovies] = useState([])\n    const [searchKey, setSearchKey] = useState(\"\")\n    const [movie, setMovie] = useState({title: \"Loading Movies\"})\n\n    useEffect(() => {\n        fetchMovies()\n    }, [])\n\n    const fetchMovies = async (event) => {\n        if (event) {\n            event.preventDefault()\n        }\n\n        const {data} = await axios.get(`${searchKey ? SEARCH_API : DISCOVER_API}`, {\n            params: {\n                api_key: API_KEY,\n                query: searchKey\n            }\n        })\n\n        console.log(data.results[0])\n        setMovies(data.results)\n        setMovie(data.results[0])\n\n        if (data.results.length) {\n            await fetchMovie(data.results[0].id)\n        }\n    }\n\n    const fetchMovie = async (id) => {\n        const {data} = await axios.get(`${MOVIE_API}movie/${id}`, {\n            params: {\n                api_key: API_KEY,\n                append_to_response: \"videos\"\n            }\n        })\n\n        if (data.videos && data.videos.results) {\n            const trailer = data.videos.results.find(vid => vid.name === \"Official Trailer\")\n            setTrailer(trailer ? trailer : data.videos.results[0])\n        }\n\n        setMovie(data)\n    }\n\n\n    const selectMovie = (movie) => {\n        fetchMovie(movie.id)\n        setPlaying(false)\n        setMovie(movie)\n        window.scrollTo(0, 0)\n    }\n\n    const renderMovies = () => (\n        movies.map(movie => (\n            <Movie\n                selectMovie={selectMovie}\n                key={movie.id}\n                movie={movie}\n            />\n        ))\n    )\n\n    return (\n        <div className=\"App\">\n            <header className=\"center-max-size header\">\n                <span className={\"brand\"}>Movie Trailer App</span>\n                <form className=\"form\" onSubmit={fetchMovies}>\n                    <input className=\"search\" type=\"text\" id=\"search\"\n                           onInput={(event) => setSearchKey(event.target.value)}/>\n                    <button className=\"submit-search\" type=\"submit\"><i className=\"fa fa-search\"></i></button>\n                </form>\n            </header>\n            {movies.length ?\n                <main>\n                    {movie ?\n                        <div className=\"poster\"\n                             style={{backgroundImage: `linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 1)), url(${BACKDROP_PATH}${movie.backdrop_path})`}}>\n                            {playing ?\n                                <>\n                                    <Youtube\n                                        videoId={trailer.key}\n                                        className={\"youtube amru\"}\n                                        containerClassName={\"youtube-container amru\"}\n                                        opts={\n                                            {\n                                                width: '100%',\n                                                height: '100%',\n                                                playerVars: {\n                                                    autoplay: 1,\n                                                    controls: 0,\n                                                    cc_load_policy: 0,\n                                                    fs: 0,\n                                                    iv_load_policy: 0,\n                                                    modestbranding: 0,\n                                                    rel: 0,\n                                                    showinfo: 0,\n                                                },\n                                            }\n                                        }\n                                    />\n                                    <button onClick={() => setPlaying(false)} className={\"button close-video\"}>Close\n                                    </button>\n                                </> :\n                                <div className=\"center-max-size\">\n                                    <div className=\"poster-content\">\n                                        {trailer ?\n                                            <button className={\"button play-video\"} onClick={() => setPlaying(true)}\n                                                    type=\"button\">Play\n                                                Trailer</button>\n                                            : 'Sorry, no trailer available'}\n                                        <h1>{movie.title}</h1>\n                                        <p>{movie.overview}</p>\n                                    </div>\n                                </div>\n                            }\n                        </div>\n                        : null}\n\n                    <div className={\"center-max-size container\"}>\n                        {renderMovies()}\n                    </div>\n                </main>\n                : 'Sorry, no movies found'}\n        </div>\n    );\n}\n\nexport default App;\n","/Users/Enjodi/Desktop/project2/Dom the Dev/movieapp/src/components/Movie.js",[],[],"/Users/Enjodi/Desktop/movieapp/src/index.js",[],[],["37","38"],"/Users/Enjodi/Desktop/movieapp/src/TabMovies.js",["39"],[],"import {useEffect, useState} from \"react\"\nimport './TabMovies/TabMovies.css'\nimport axios from 'axios'\nimport Movie from \"./TabMovies/Movie\"\nimport Youtube from 'react-youtube'\n\nfunction TabMovies() {\n    const MOVIE_API = \"https://api.themoviedb.org/3/\"\n    const SEARCH_API = MOVIE_API + \"search/movie\"\n    const DISCOVER_API = MOVIE_API + \"trending/movie/week\"\n    const API_KEY = \"9f7b6e946ac75c3cb54ee6d09ea3c774\"\n    const BACKDROP_PATH = \"https://image.tmdb.org/t/p/w1280\"\n\n    const [playing, setPlaying] = useState(false)\n    const [trailer, setTrailer] = useState(null)\n    const [movies, setMovies] = useState([])\n    const [searchKey, setSearchKey] = useState(\"\")\n    const [movie, setMovie] = useState({title: \"Loading Movies\"})\n\n    useEffect(() => {\n        fetchMovies()\n    }, [])\n\n    const fetchMovies = async (event) => {\n        if (event) {\n            event.preventDefault()\n        }\n\n        const {data} = await axios.get(`${searchKey ? SEARCH_API : DISCOVER_API}`, {\n            params: {\n                api_key: API_KEY,\n                query: searchKey\n            }\n        })\n\n        console.log(data.results[0])\n        setMovies(data.results)\n        setMovie(data.results[0])\n\n        if (data.results.length) {\n            await fetchMovie(data.results[0].id)\n        }\n    }\n\n    const fetchMovie = async (id) => {\n        const {data} = await axios.get(`${MOVIE_API}movie/${id}`, {\n            params: {\n                api_key: API_KEY,\n                append_to_response: \"videos\"\n            }\n        })\n\n        if (data.videos && data.videos.results) {\n            const trailer = data.videos.results.find(vid => vid.name === \"Official Trailer\")\n            setTrailer(trailer ? trailer : data.videos.results[0])\n        }\n\n        setMovie(data)\n    }\n\n\n    const selectMovie = (movie) => {\n        fetchMovie(movie.id)\n        setPlaying(false)\n        setMovie(movie)\n        window.scrollTo(0, 0)\n    }\n\n    const renderMovies = () => (\n        movies.map(movie => (\n            <Movie\n                selectMovie={selectMovie}\n                key={movie.id}\n                movie={movie}\n            />\n        ))\n    )\n\n    return (\n        <div className=\"App\">\n            <header className=\"center-max-size header\">\n                <span className={\"brand\"}> Maniraja Movie App </span>\n                <form className=\"form\" onSubmit={fetchMovies}>\n                    <input className=\"search\" placeholder=\"Search Movie\" type=\"text\" id=\"search\"\n                           onInput={(event) => setSearchKey(event.target.value)}/>\n                    <button className=\"submit-search\" type=\"submit\"> <i className=\"fa fa-search\"></i></button>\n                </form>\n            </header>\n            {movies.length ?\n                <main>\n                    {movie ?\n                        <div className=\"poster\"\n                             style={{backgroundImage: `linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 1)), url(${BACKDROP_PATH}${movie.backdrop_path})`}}>\n                            {playing ?\n                                <>\n                                    <Youtube\n                                        videoId={trailer.key}\n                                        className={\"youtube amru\"}\n                                        containerClassName={\"youtube-container amru\"}\n                                        opts={\n                                            {\n                                                width: '100%',\n                                                height: '100%',\n                                                playerVars: {\n                                                    autoplay: 1,\n                                                    controls: 0,\n                                                    cc_load_policy: 0,\n                                                    fs: 0,\n                                                    iv_load_policy: 0,\n                                                    modestbranding: 0,\n                                                    rel: 0,\n                                                    showinfo: 0,\n                                                },\n                                            }\n                                        }\n                                    />\n                                    <button onClick={() => setPlaying(false)} className={\"button close-video\"}>Close\n                                    </button>\n                                </> :\n                                <div className=\"center-max-size\">\n                                    <div className=\"poster-content\">\n                                        {trailer ?\n                                            <button className={\"button play-video\"} onClick={() => setPlaying(true)}\n                                                    type=\"button\">Play\n                                                Trailer</button>\n                                            : 'Sorry, no trailer available'}\n                                        <h1>{movie.title}</h1>\n                                        <p>{movie.overview}</p>\n                                    </div>\n                                </div>\n                            }\n                        </div>\n                        : null}\n\n                    <div className={\"center-max-size container\"}>\n                        {renderMovies()}\n                    </div>\n                </main>\n                : 'Sorry, no movies found'}\n        </div>\n    );\n}\n\nexport default TabMovies;\n","/Users/Enjodi/Desktop/movieapp/src/TabMovies/Movie.js",[],[],{"ruleId":"40","severity":1,"message":"41","line":22,"column":8,"nodeType":"42","endLine":22,"endColumn":10,"suggestions":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"40","severity":1,"message":"41","line":22,"column":8,"nodeType":"42","endLine":22,"endColumn":10,"suggestions":"48"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchMovies'. Either include it or remove the dependency array.","ArrayExpression",["49"],"no-native-reassign",["50"],"no-negated-in-lhs",["51"],["52"],{"desc":"53","fix":"54"},"no-global-assign","no-unsafe-negation",{"desc":"53","fix":"55"},"Update the dependencies array to be: [fetchMovies]",{"range":"56","text":"57"},{"range":"58","text":"57"},[768,770],"[fetchMovies]",[794,796]]